/***
 *
 *  jquery中实现的ajax方法
 *
 *    $.ajax({
 *      url: 请求的地址
 *      type: 请求方式, 默认值是get
 *      dataType: text/json/jsonp   text 数据一定是字符串  json 如果后端返回json格式的字符串,那么在成功的回调中,拿到的是解析后的js对象  jsonp用来处理jsonp跨域的
 *      timeout: 设置超时时间  单位是毫秒
 *      complete: 完成
 *      beforeSend: 发送请求之前 返回值是布尔值.默认是true. 如果是 true, 就发送请求,否则不发送请求
 *      success: 成功
 *      error: 失败
 *    })
 *
 *
 *  同源跨域
 *
 *      同源策略是什么? 浏览器的安全策略. 规定了发送请求的资源路径和请求的地址应该是协议,域名,端口号完全相同,才认为是同源的.
 *      同源的影响:
 *          ajax: 如果给不同源的地址发送请求,浏览器会把数据拦截下来,代码中获取不到数据
 *          cookie: 不同源的地址不能共享cookie
 *
 *      跨域:  给不同源的地址发送请求
 *
 *  解决跨域问题:
 *
 *       1. jsonp:
 *
 *          原理: script标签src属性发出去的请求是不受同源策略限制的. 所以我们动态的创建script标签,给src属性,添加请求地址. 然后在全局声明一个函数,用于接收后端响应的数据. 需要将这个函数名添加到请求地址的查询字符串的位置. 后端配合前端,将要返回的数据,以函数调用的形式返回.写在实参的位置上,之前在全局声明的函数的形参可以接收到
 *
 *
 *         jsonp优缺点:
 *              缺点: 只能发get请求, 需要全局定义函数, 必须得后台配合
 *              优点: 兼容性高
 *
 *       2. cors
 *
 *           原理: 跨域资源共享(浏览器再接收到跨域数据到时候,会在响应头中检查access-control-allow-origin这个信息,如果允许就直接将数据交给js代码)
 *
 *         优缺点:
 *            缺点: 兼容性不高
 *            优点: 前端不需要处理,后端处理
 *
 */
